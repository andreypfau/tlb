package org.ton.tlb

private val ADD_TABLE = computeSemilatTable(
    arrayOf(
        byteArrayOf(0, 1, 2, 3),
        byteArrayOf(1, 2, 3, 0),
        byteArrayOf(2, 3, 0, 1),
        byteArrayOf(3, 0, 1, 2)
    )
)

private val MUL_TABLE = computeSemilatTable(
    arrayOf(
        byteArrayOf(0, 0, 0, 0),
        byteArrayOf(0, 1, 2, 3),
        byteArrayOf(0, 2, 2, 2),
        byteArrayOf(0, 3, 2, 3)
    )
)

private val GET_BIT_TABLE = computeSemilatBaseTable(
    arrayOf(
        byteArrayOf(1, 1, 1, 1),
        byteArrayOf(2, 1, 1, 1),
        byteArrayOf(1, 3, 3, 3),
        byteArrayOf(2, 3, 3, 3)
    )
)

internal fun abstractAdd(x: Int, y: Int) = ADD_TABLE[x and 15][y and 15].toInt()
internal fun abstractMul(x: Int, y: Int) = MUL_TABLE[x and 15][y and 15].toInt()
internal fun abstractGetBit(x: Int, y: Int) = GET_BIT_TABLE[x and 15][y and 15].toInt()

// 0 = 0, 1 = 1, 2 = any even >= 2, 3 = any odd >= 3
// (We work in N/(4~2), or in the free semilattice generated by it.)
internal fun abstractNatConst(value: Int) = 1 shl ((value and 1) + (if (value >= 2) 2 else 0))

private fun computeSemilatTable(
    baseTable: Array<ByteArray>,
): Array<ByteArray> {
    val table = Array(16) { ByteArray(16) }
    repeat(16) { x ->
        repeat(16) { y ->
            var res = 0
            repeat(4) { i ->
                if ((x ushr i) and 1 != 0) {
                    repeat(4) { j ->
                        if ((y ushr j) and 1 != 0) {
                            res = 1 shl baseTable[i][j].toInt()
                        }
                    }
                }
            }
            table[x][y] = res.toByte()
        }
    }
    return table
}

private fun computeSemilatBaseTable(
    baseTable: Array<ByteArray>,
): Array<ByteArray> {
    val table = Array(16) { ByteArray(16) }
    repeat(16) { x ->
        repeat(16) { y ->
            var res = 0
            repeat(4) { i ->
                if ((x ushr i) and 1 != 0) {
                    repeat(4) { j ->
                        if ((y ushr j) and 1 != 0) {
                            res = res xor baseTable[i][j].toInt()
                        }
                    }
                }
            }
            table[x][y] = res.toByte()
        }
    }
    return table
}
